{"version":3,"sources":["webpack://SimpleGoals/webpack/universalModuleDefinition","webpack://SimpleGoals/webpack/bootstrap","webpack://SimpleGoals/./src/index.css?43fa","webpack://SimpleGoals/./src/index.js","webpack://SimpleGoals/./src/modules/achievements.js","webpack://SimpleGoals/./src/modules/buttons.js","webpack://SimpleGoals/./src/modules/cloud-storage.js","webpack://SimpleGoals/./src/modules/local-goals.js","webpack://SimpleGoals/./src/modules/overview.js","webpack://SimpleGoals/./src/modules/styles.js","webpack://SimpleGoals/./src/modules/support.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,uC;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAO,EAAE,oCAAa;;AAE8B;AACG;AACQ;AACZ;AACJ;;AAE/C;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,UAAU,yEAAY;AACtB,QAAQ,4EAAa;AACrB,EAAE,sEAAY;AACd,EAAE,oEAAW;AACb;;AAEO;AACP,EAAE,wEAAU;AACZ;;AAEiD;;AAElC,gEAAC,cAAc,4EAAY,CAAC;;;;;;;;;;;;;AChC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AACS;AACE;AACiB;AAC1B;;AAEtC;AACA;AACA,qEAAqE,IAAI;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,UAAU;AAC9F;AACA,uFAAuF,IAAI,kBAAkB,OAAO;AACpH,sGAAsG,IAAI;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,2DAAW;AACb;AACA;AACA;;AAEA;AACA;AACA,cAAc,kBAAkB;AAChC,4BAA4B,QAAQ;AACpC;AACA;;AAEA;AACA,cAAc,yDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mFAAmF,IAAI;AACvF;AACA,qFAAqF,IAAI;AACzF;AACA;AACA,eAAe,sDAAY;AAC3B,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,EAAE,kEAAa;AACf,QAAQ,oEAAa;AACrB;AACA,EAAE,uEAAqB;AACvB,C;;;;;;;;;;;;ACpFA;AAAA;AAAA;AAAA;AAAyC;AACE;;AAEpC;AACP;AACA;AACA;AACA,MAAM,gEAAU;AAChB;AACA;AACA;AACA,MAAM,8DAAY;AAClB;AACA,GAAG;AACH,C;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAuC;;AAEhC;AACP;AACA;AACA;AACA;AACA;AACA,UAAU,4DAAW;AACrB,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,2BAA2B,4DAAW;AACtC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAsC;;AAEtC;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,2DAAW;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA4C,+DAA+D;AAC3G;AACA;AACA;AACA;AACA,sDAAsD,gBAAgB;AACtE;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;ACrEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oB;AACA,oB;AACA,oB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;;AAEO;AACP,kCAAkC,OAAO,EAAE,SAAS;AACpD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEO;AACP;AACA,2BAA2B,aAAa;AACxC,iBAAiB,mBAAmB;AACpC;AACA;AACA,uBAAuB;AACvB;AACA;AACA,C","file":"simplegoals.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleGoals\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleGoals\"] = factory();\n\telse\n\t\troot[\"SimpleGoals\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","// extracted by mini-css-extract-plugin","require ('./index.css')\n\nimport { prepareGoals } from './modules/local-goals'\nimport { loadFromCloud } from './modules/cloud-storage'\nimport { initOverview, showOverview } from './modules/overview'\nimport { unlockGoal } from './modules/achievements'\nimport { initButtons } from './modules/buttons'\n\nlet options = {\n  timeout: 0,\n  onGoalUnlock: (goalKey) => {},\n  freshStart: false,\n  useCloudStorage: false,\n  appId: null,\n  user: {}\n}\nlet goals = null\n\nexport const init = async config => {\n  Object.assign(options, config)\n  goals = prepareGoals(options)\n  await loadFromCloud(goals, options)\n  initOverview(goals, options)\n  initButtons(goals, options)\n}\n\nexport const unlock = async (name) => {\n  unlockGoal(name, goals, options)\n}\n\nexport { showOverview } from './modules/overview'\n\nexport default {init, unlock, showOverview}\n","import { hashCode } from './support'\nimport { saveLocalGoal } from './local-goals'\nimport { saveCloudGoal } from './cloud-storage'\nimport { rerenderOverviewGoals, showOverview } from './overview'\nimport { applyStyles } from './styles'\n\nconst createAchievementHtml = (key, goal, button, options) => {\n  const achievementHtmlString = `\n  <div class=\"simplegoals-achievement\" id=\"simplegoals-achievement-${key}\">\n    <div class=\"simplegoals-achievement__icon\">\n      <img src=\"https://static.simplegoals.co/cup.svg\" />\n    </div>\n    <div class=\"simplegoals-achievement__body\">\n      <p class=\"simplegoals-achievement__notification\">\n        New achievement unlocked\n      </p>\n      <p class=\"simplegoals-achievement__name\" id=\"simplegoals-achievement__name\">${goal.name}</p>\n    </div>\n    <div class=\"simplegoals-achievement__button\" id=\"simplegoals-achievement__button-${key}\" role=\"button\">${button}</div>\n    <button class=\"simplegoals-achievement__close-button\" id=\"simplegoals-achievement__close-button-${key}\">\n      <svg viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g>\n          <path d=\"M50 50L450 450\" stroke-width=\"100\" stroke-linecap=\"round\"/>\n          <path d=\"M50 450L450 50\" stroke-width=\"100\" stroke-linecap=\"round\"/>\n        </g>\n      </svg>\n    </button>\n  </div>\n  `\n  const node = new DOMParser().parseFromString(achievementHtmlString , 'text/html').body.firstChild\n  applyStyles(node, options)\n  document.body.appendChild(node)\n  return node\n}\n\nconst recalculateAchievementsTop = () => {\n  const nodes = document.getElementsByClassName('simplegoals-achievement')\n  for(let i=0; i < nodes.length; i++) {\n    nodes[i].style.top = `${1 + i*7}em`\n  }\n}\n\nconst showAchievement = (name, goal, options) => {\n  const key = hashCode(name)\n  const achievement = createAchievementHtml(key, goal, 'Learn more', options)\n  recalculateAchievementsTop()\n  achievement.classList.add('simplegoals-achievement--opened')\n  initAchievement(key, achievement)\n  if (options.timeout) {\n    achievementTimeout = setTimeout(() => hideAchievement(achievement), options.timeout)\n  }\n}\n\nconst initAchievement = (key, achievement) => {\n  achievement.addEventListener('click', event => achievement.classList.toggle('simplegoals-achievement--clicked'))\n  const trigger = document.getElementById(`simplegoals-achievement__close-button-${key}`)\n  trigger.addEventListener('click', event => hideAchievement(achievement))\n  const overviewTrigger = document.getElementById(`simplegoals-achievement__button-${key}`)\n  overviewTrigger.addEventListener('click', event => {\n    hideAchievement(achievement)\n    setTimeout(showOverview, 200)\n  })\n}\n\nconst hideAchievement = (achievement) => {\n  achievement.classList.remove('simplegoals-achievement--opened')\n  achievement.classList.add('simplegoals-achievement--closed')\n  setTimeout(() => {\n    achievement.parentNode.removeChild(achievement)\n    recalculateAchievementsTop()\n  }, 2000)\n}\n\nexport const unlockGoal = async (name, goals, options) => {\n  if(!goals || !goals[name]) { return }\n  if(goals[name].unlocked){\n    return\n  }\n  goals[name].unlocked = true\n  options.onGoalUnlock(name)\n  saveLocalGoal(name, options)\n  await saveCloudGoal(name, options)\n  showAchievement(name, goals[name], options)\n  rerenderOverviewGoals(goals)\n}","import { showOverview } from './overview'\nimport { unlockGoal } from './achievements'\n\nexport const initButtons = (goals, options) => {\n  document.addEventListener('click', function (event) {\n    if (event.target.dataset.simplegoalsUnlock) {\n      event.preventDefault()\n      unlockGoal(event.target.dataset.simplegoalsUnlock, goals, options)\n    }\n    if (event.target.dataset.simplegoalsOverview) {\n      event.preventDefault()\n      showOverview();\n    }\n  }, false);\n}","import { postRequest } from './support'\n\nexport const saveCloudGoal = async (name, options) => {\n  if (options.useCloudStorage) {\n    let data = {\n      name: name\n    }\n    addAuthData(data, options)\n    await postRequest(\"/goals/unlock\", data)\n  } else {\n    return false\n  }\n}\n\nconst addAuthData = (hash, options) => {\n  hash.appId = options.appId\n  hash.user = options.user\n}\n\nexport const loadFromCloud = async (goals, options) => {\n  if (options.useCloudStorage) {\n    let data = {\n      goals: Object.keys(goals).map((key) => {\n        return {\n          name: key,\n          description: goals[key].description\n        }\n      }),\n      unlockedGoals: Object.keys(goals).filter((key) => {\n        goals[key].unlocked\n      })\n    }\n    addAuthData(data, options)\n    const response = await postRequest(\"/sessions\", data)\n    if (response) {\n      updateGoalsFromCloud(response, goals)\n    }\n  } else {\n    return false\n  }\n}\n\nconst updateGoalsFromCloud = (response, goals) => {\n  for (const key of Object.keys(goals)) {\n    goals[key].unlocked = response.unlockedGoals.includes(key)\n  }\n}","export const saveLocalGoal = (name, options) => {\n  if (typeof(Storage) !== \"undefined\" && !options.freshStart) {\n    let localGoals = getLocalGoals(options)\n    localGoals.push(name)\n    localStorage.setItem('simplegoals-storage', JSON.stringify(localGoals))\n  }\n}\n\nconst getLocalGoals = (options) => {\n  if (typeof(Storage) !== \"undefined\" && !options.freshStart) {\n    return JSON.parse(localStorage.getItem('simplegoals-storage')) || []\n  } else {\n    return []\n  }\n}\n\nexport const prepareGoals = (options) => {\n  let goals = options.goals\n  const localGoals = getLocalGoals(options)\n  for (const key of Object.keys(goals)) {\n    goals[key].unlocked = localGoals.includes(key)\n  }\n  return goals\n}","import { applyStyles } from './styles'\n\nlet overview = null\n\nexport const initOverview = (goals, options) => {\n  createOverviewHtml(goals, options)\n  overview = document.getElementById('simplegoals-overview')\n  const trigger = document.getElementById('simplegoals-overview__close-button')\n  trigger.addEventListener('click', event => hideOverview())\n}\n\nconst createOverviewHtml = (goals, options) => {\n  const overviewHtmlString = `\n  <div class=\"simplegoals-overview\" id=\"simplegoals-overview\">\n    <div class=\"simplegoals-overview__wrapper\">\n      <div class=\"simplegoals-overview__body\">\n        <h1 class=\"simplegoals-overview__title\">Achievements</h1>\n        <p class=\"simplegoals-overview__subtitle\">Complete tasks and unlock achievements</p>\n        <div class=\"simplegoals-overview__goals\" id=\"simplegoals-overview__goals\">\n        ` + overviewGoalsHtml(goals) + `\n        </div>\n        <button class=\"simplegoals-overview__close-button\" id=\"simplegoals-overview__close-button\">\n          Close\n        </button>\n        <div class=\"simplegoals-overview__attribution\">\n          Powered by <a class=\"simplegoals-overview__attribution-link\" href=\"https://simplegoals.co\" target=\"_blank\">SimpleGoals</a>\n        </div>\n      </div>\n    </div>\n  </div>\n  `\n  const node = new DOMParser().parseFromString(overviewHtmlString , 'text/html').body.firstChild\n  applyStyles(node, options)\n  document.body.appendChild(node)\n}\n\nconst overviewGoalsHtml = (goals) => {\n  let result = \"\";\n  const sortedKeys = Object.keys(goals).sort((a, b) => goals[b].unlocked - goals[a].unlocked)\n  for (const key of sortedKeys) {\n    result += `\n    <div class=\"simplegoals-overview-goal ${goals[key].unlocked ? \"\" : \"simplegoals-overview-goal--locked\"}\">\n      <div class=\"simplegoals-overview-goal__icon\">\n        <img src=\"https://static.simplegoals.co/cup.svg\" />\n      </div>\n      <div class=\"simplegoals-overview-goal__body\">\n        <h3 class=\"simplegoals-overview-goal__name\">${goals[key].name}</h3>\n        <p class=\"simplegoals-overview-goal__description\">\n          ${goals[key].description}\n        </p>\n      </div>\n    </div>\n    `\n  }\n  return result\n}\n\nexport const rerenderOverviewGoals = (goals) => {\n  document.getElementById('simplegoals-overview__goals').innerHTML = overviewGoalsHtml(goals)\n}\n\nexport const showOverview = () => {\n  if(!overview) { return }\n  overview.scrollTo(0, 0)\n  overview.classList.add('simplegoals-overview--opened')\n}\n\nconst hideOverview = () => {\n  overview.classList.remove('simplegoals-overview--opened')\n}","const defaultStyleOptions = {\n  fontFamily: 'BlinkMacSystemFont, -apple-system, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif',\n  background: '#ffffff',\n  title: '#000000',\n  subtitle: '#718096',\n  primary: '#38b2ac',\n  primaryHover: '#319795',\n  opposite: '#ffffff'\n}\n\nconst getStyles = (options = {}) => {\n  let styles = defaultStyleOptions;\n  ['fontFamily', 'background', 'title', 'subtitle'].forEach(key => {\n    if (options[key]) {\n      styles[key] = options[key]\n    }\n  })\n  if (options.primary) {\n    styles.primary = options.primary\n    styles.primaryHover = getHover(options.primary)\n    styles.opposite = getOpposite(options.primary)\n  }\n  ['primaryHover', 'opposite'].forEach(key => {\n    if (options[key]) {\n      styles[key] = options[key]\n    }\n  })\n  return styles\n}\n\nconst getHover = (color) => {\n  const percent = 7\n\n  let R = parseInt(color.substring(1,3),16);\n  let G = parseInt(color.substring(3,5),16);\n  let B = parseInt(color.substring(5,7),16);\n\n  R = parseInt(R * (100 - percent) / 100);\n  G = parseInt(G * (100 - percent) / 100);\n  B = parseInt(B * (100 - percent) / 100);\n\n  R = (R<255)?R:255;  \n  G = (G<255)?G:255;  \n  B = (B<255)?B:255;  \n\n  const RR = ((R.toString(16).length==1)?\"0\"+R.toString(16):R.toString(16));\n  const GG = ((G.toString(16).length==1)?\"0\"+G.toString(16):G.toString(16));\n  const BB = ((B.toString(16).length==1)?\"0\"+B.toString(16):B.toString(16));\n\n  return \"#\"+RR+GG+BB;\n}\n\nconst getOpposite = (hex) => {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1);\n  }\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  if (hex.length !== 6) {\n      throw new Error('Invalid HEX color.');\n  }\n  var r = parseInt(hex.slice(0, 2), 16),\n      g = parseInt(hex.slice(2, 4), 16),\n      b = parseInt(hex.slice(4, 6), 16);\n  // http://stackoverflow.com/a/3943023/112731\n  return (r * 0.299 + g * 0.587 + b * 0.114) > 186\n      ? '#000000'\n      : '#FFFFFF';\n}\n\nexport const applyStyles = (element, options) => {\n  let styles = getStyles(options.theme)\n  element.style.setProperty('--simplegoals-font-family', styles.fontFamily);\n  element.style.setProperty('--simplegoals-color-background', styles.background);\n  element.style.setProperty('--simplegoals-color-title', styles.title);\n  element.style.setProperty('--simplegoals-color-subtitle', styles.subtitle);\n  element.style.setProperty('--simplegoals-color-primary', styles.primary);\n  element.style.setProperty('--simplegoals-color-primary-hover', styles.primaryHover);\n  element.style.setProperty('--simplegoals-color-opposite', styles.opposite);\n}","const apiUrl = \"https://api.simplegoals.co\"\n\nexport const postRequest = async (endpoint, data) => {\n  const response = await fetch(`${apiUrl}${endpoint}`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n  if(response.ok) {\n    return await response.json()\n  } else {\n    return false\n  }\n}\n\nexport const hashCode = (source) => {\n  let hash = 0;\n  if (source.length == 0) { return hash; }\n  for (let i = 0; i < source.length; i++) {\n    let char = source.charCodeAt(i);\n    hash = ((hash<<5)-hash)+char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash;\n}"],"sourceRoot":""}